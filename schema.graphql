type Block @entity {
  id: ID!
  uuid: Uuid

  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: String
  signer: Account #create relation to account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: BigInt
  isSigned: Boolean
  isSuccess: Boolean

  block: Block #create relation to block

  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID!

  index: Int!
  section: String!
  method: String!
  data: String!

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrinsic
}

type Call @entity {
  id: ID!

  section: String
  method: String
  args: String
  timestamp: Date
  isSuccess: Boolean

  block: Block #create relation to block
  signer: Account #create ration to account
  extrinsic: Extrinsic #create relation to extrinsic
  parentCall: Call #create relation to call

  calls: [Call] @derivedFrom(field: "parentCall")
}

type Nft @entity {
  id: ID!

  tokenId: String
  class: Class #create relation to class
  burned: Boolean
  quantity: Int
  orderItems: [OrderItem] @derivedFrom(field: "nft")

  # TokenData
  deposit: BigInt
  event: Event
  creator: Account
  owner: Account
  royalty: Boolean
  royaltyBeneficiary: Account
  metadata: Metadata

  # views: [NftView] @derivedFrom(field: "nft")

  debug: String
}

type Account @entity {
  id: ID!

  ownedNfts: [Nft] @derivedFrom(field: "owner")
  createdNfts: [Nft] @derivedFrom(field: "creator")
  createdClasses: [Class] @derivedFrom(field: "creator")

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")

  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")
}

type Token @entity {
  id: ID!

  decimal: Int
  name: String
}

type Transfer @entity {
  id: ID!

  from: Account
  to: Account
  token: Token
  amount: BigInt

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrinsic
  call: Call #create relation to call
  timestamp: Date
  isSuccess: Boolean

  debug: String
}

type Category @entity {
  id: ID!

  creator: Account
  name: String

  orders: [Order] @derivedFrom(field: "category")

  debug: String
}

# TODO: rename to collection ?
type Class @entity {
  id: ID!

  owner: Account
  creator: Account
  metadata: Metadata
  name: String
  description: String
  blockNumber: Int

  transferable: Boolean
  burnable: Boolean

  royaltyRate: Int
  category: Category
  nfts: [Nft] @derivedFrom(field: "class")
  debug: String
}

type NftTransfer @entity {
  id: ID!

  from: Account
  to: Account
  quantity: Int
  nft: Nft

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrinsic
  timestamp: Date
  isSuccess: Boolean

  debug: String
}

type OrderItem @entity {
  id: ID!

  nft: Nft!
  quantity: Int!
  order: Order
}

type AuctionItem @entity {
  id: ID!

  nft: Nft!
  quantity: Int!
  auction: Auction
}

type Auction @entity {
  id: ID!
  creator: Account
  type: String # one of British / Dutch
  status: String # one of Created / Removed / Redeemed
  currencyId: Int # per65535
  minRaise: Int # per65535
  deposit: BigInt
  deadline: Int # block number
  items: [AuctionItem] @derivedFrom(field: "auction")
  bid: AuctionBid
  commissionRate: Int

  # british auction
  hammerPrice: BigInt
  initPrice: BigInt
  allowDelay: Boolean

  # dutch auction
  minPrice: BigInt
  maxPrice: BigInt
  allowBritishAuction: Boolean
}

type AuctionBid @entity {
  id: ID!
  type: String # one of British / Dutch
  price: BigInt
  blockNumber: Int
  commissionAgent: Account
  commissionData: String
  bidder: Account
}

type Order @entity {
  id: ID!

  currencyId: Int
  deadline: Int

  intent: OrderDirection # String # one of Buy / Sell
  status: OrderStatus # String # one of Created / Cancelled / Completed

  price: BigInt
  deposit: BigInt

  seller: Account #create relation to Account
  buyer: Account #create relation to Account

  category: Category #create relation to category

  items: [OrderItem] @derivedFrom(field: "order")

  eventCreated: Event #create relation to event
  eventCancelled: Event #create relation to event
  eventCompleted: Event #create relation to event

  debug: String
}

type OrderStatus @entity {
  id: ID! # one of Created / Completed / Cancelled
  orders: [Order] @derivedFrom(field: "status")
}

type OrderDirection @entity {
  id: ID! # one of Buy / Sell
  orders: [Order] @derivedFrom(field: "intent")
}

type Metadata @jsonField {
  name: String!
  description: String!
  stub: String! # path
  featuredUrl: String! # ipfs hash
  logoUrl: String! # ipfs hash
}

type BadData @entity {
  id: ID!
  data: String
  reason: String
}
